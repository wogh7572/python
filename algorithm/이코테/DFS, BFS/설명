stack: FILO(First In Last Out)
ex) li.pop(), li.append()

queue: FIFO(First In First Out)
ex) li.pop(0) or li.popleft()

재귀함수: 자기자신을 호출하는 함수
ex) 팩토리얼 함수
1. 반복문으로 구현
def factorial_iterative(n):
	result = 1
    for i in range(1, n+1):
    	result *= i
    return result
2. 재귀적으로 구현
def factorial_recursive(n):
    if n<=1:
    	return 1
    return n * factorial_recursive(n-1)

<DFS>
DFS(Depth-First-Search)는 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘이다.
표현방식에는 1.인접행렬(2차원행렬로 그래프의 연결관계를 표현하는 방식), 
2.인접 리스트(리스트로 그래프의 연결관계를 표현하는 방식)가 있다.
ex1) 
#0<-a->1, 0<-c->2, 1<-x->2
INF=987654321
graph= [
	[0, a, c],
	[a, 0, INF],
	[c, INF, 0]
]#
ex2:
graph = [[] for i in range(n)]
graph[0].append((1, 7))


DFS예제
def DFS(graph, v, visited):
	visited[v]=True
	print(v, end=' ')
	for i in graph[v]:
		if visited[i]==0:
			DFS(graph, i, visited)
graph = [
	[],
	[2, 3, 8],
	[1, 7],
	[1, 4, 5],
	[3, 5],
	[3, 4],
	[7],
	[2, 6, 8],
	[1, 7]
]
visited=[False]*9
DFS(graph, v, visited)



<BFS>
BFS(Breadth-First-Search)는 가까운 노드부터 탐색한다
1. 탐색노드를 큐에 삽입하고 방문처리를 한다.
2. 큐에서 노드를 꺼내서 해당노드의 인접노드 중에서 방문하지 않은 노드를 모드 큐에 삽입하고 방문처리를 한다.
3. 2를 계속 반복한다.


BFS 예제
from collections import deque
def BFS(graph, start, visited):
	queue = deque([start])
	visited[start])=True
	while queue:
	v = queue.popleft()
	print(v, end=' ')
	for i in graph[v]:
		if visited[i]==0:
			visited[i]=True
			queue.append(i)
			
graph = [
	[],
	[2, 3, 8],
	[1, 7],
	[1, 4, 5],
	[3, 5],
	[3, 4],
	[7],
	[2, 6, 8],
	[1, 7]
]
visited=[False]*9
BFS(graph, start, visited)

	
	
	
	
	




